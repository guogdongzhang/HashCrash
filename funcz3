from z3 import *
class getZ3expr:

    def __init__(self,init_body,loop_body,end_body,passwdlen,checksum):
        self.initbody = init_body
        self.loopbody = loop_body
        self.endbody = end_body
        self.checksum = checksum
        self.pawdlen = passwdlen #length of the password
        self.var_allocate = {}
        self.password = [BitVec("b%d" % i,32) for i in range(passwdlen)]
        self.exitsvir = []
        self.passwordreg = [] # the registers that may store password
    def IRtoZ3exprVira(self,var):  # if var is number , return a number , else return a z3expr
        x = str(var)

        if ("0x" in x):
            return int(x[4:],16)
        elif (x[-1] == 'h'):
            x = x[0:-1]
            x = '0x'+x
            return int(x)
        else:
            if (x not in self.var_allocate):
                # exec "global %s" % x
                strcmd = "%s = BitVec('%s',32)" % (x, x)
                exec strcmd
                self.var_allocate["%s" % x] = eval(x)
                return eval(x)
            else:
                return self.var_allocate["%s" % x]
    # def simToequa(self,body): # change the assembly language to equation
    #     newbody = []
    #     for item in body:
    #         arr = item.split(" ")
    #         if(arr[0] == "add"):
    #             newbody.append(arr[1]+"="+arr[1]+"+"+arr[2])
    #         elif(arr[0] == "imul"):
    #             newbody.append(arr[1]+"="+arr[1]+"*"+arr[2])
    #         elif(arr[0] == "mov" or arr[0] == "movsx"):
    #             newbody.append(arr[1] + "=" +  arr[2])
    #     return newbody
    def is_alphanum(self ,x):
        return Or(And(x>= 0x41 , x<= 0x5a), And(x>= 0x61 , x<= 0x7a) ,And(x>=0x30,x<=0x39))
    def solve(self):
        checksum = BitVec('checksum',32)
        F = []
        F.extend([self.is_alphanum(self.password[i])for  i in range(self.pawdlen)])
        checksum_num = self.checksum
        F.extend([
            checksum == checksum_num,
            self.execute() == checksum
        ])
        print F
        self.get_models(F)
    def display_model(self, m):
        block = {}
        for x in m:
            if "b" in str(x):
                block[ord(str(x)[-1:])] = int(str(m[x]))
        password = "".join(map(chr,block.values()))
        print password
    def get_models(self,F):
        s = Solver()
        s.add(F)
        while True:
            if s.check() == sat:
                m = s.model()
                self.display_model(m)
                block = []
                for d in m:
                    if d.arity()>0:
                        raise Z3Exception("uninterpreted functions are not supported")
                    c = d()
                    if is_array(c) or c.sort().kind()== Z3_UNINTERPRETED_SORT:
                        raise Z3Exception("arrays and uninterpreted sorts are not supported")
                    block.append(c != m[d])
                s.add(Or(block))
            else:
                print 'done'
                break
    def execute(self):

        # initial part
        for item in self.initbody:
            item = item.replace("+","").replace("[","").replace("]","")
            arr = item.split(" ")
            if (arr[0] == 'mov'):
                # arr[1] = self.IRtoZ3exprVira(arr[1])
                if (arr[1] not in self.exitsvir):
                    strcmd = (arr[1] +"=" + "self.IRtoZ3exprVira(arr[1])")
                    exec strcmd
                    self.exitsvir.append(arr[1])
                if (arr[2][-1] == 'h' ):
                    arr[2] = 'num_0x'+arr[2][0:-1]
                elif (arr[2] == '0'):
                    arr[2] = 'num_0x'+arr[2]
                else:
                    self.passwordreg.append(arr[1])
                if (arr[2] not in self.exitsvir):
                    strcmd = (arr[2] +"=" + "self.IRtoZ3exprVira(arr[2])")
                    exec strcmd
                    self.exitsvir.append(arr[2])
                strcmd = (arr[1])+"="+arr[2]
                print strcmd
                exec strcmd
        # print  'a=', rbpvar_C
        # print 'rbpvar_4',rbpvar_4
        # loop part
        for i  in range(len(self.password)):
            for item in self.loopbody:
                item = item.replace("+", "").replace("[", "").replace("]", "")
                arr = item.split(" ")
                if(arr[0] == 'mov'):
                    if(arr[2] in self.passwordreg):
                        strcmd = (arr[1] +" = self.password[i]")
                        exec strcmd
                        print strcmd
                        continue
                    if (arr[1] not in self.exitsvir):
                        strcmd = (arr[1] + "=" + "self.IRtoZ3exprVira(arr[1])")
                        exec strcmd
                        self.exitsvir.append(arr[1])
                    if (arr[2][-1] == 'h'):
                        arr[2] = 'num_0x' + arr[2][0:-1]
                    elif (arr[2] == '0' or arr[2].isdigit()):
                        arr[2] = 'num_0x' + arr[2]
                    if (arr[2] not in self.exitsvir):
                        strcmd = (arr[2] + "=" + "self.IRtoZ3exprVira(arr[2])")
                        exec strcmd
                        self.exitsvir.append(arr[2])
                    strcmd = (arr[1]) + "=" + arr[2]
                    print strcmd
                    exec strcmd
                elif(arr[0] == 'imul'):
                    if (arr[1] not in self.exitsvir):
                        strcmd = (arr[1] + "=" + "self.IRtoZ3exprVira(arr[1])")
                        exec strcmd
                        self.exitsvir.append(arr[1])
                    if (arr[2][-1] == 'h'):
                        arr[2] = 'num_0x' + arr[2][0:-1]
                    elif (arr[2] == '0'):
                        arr[2] = 'num_0x' + arr[2]
                    if (arr[2] not in self.exitsvir):
                        strcmd = (arr[2] + "=" + "self.IRtoZ3exprVira(arr[2])")
                        exec strcmd
                        self.exitsvir.append(arr[2])
                    strcmd = (arr[1]) + "="+arr[1]+ "*" + arr[2]
                    print strcmd
                    exec strcmd
                elif(arr[0] == 'add'):
                    if (arr[1] not in self.exitsvir):
                        strcmd = (arr[1] + "=" + "self.IRtoZ3exprVira(arr[1])")
                        exec strcmd
                        self.exitsvir.append(arr[1])
                    if (arr[2][-1] == 'h'):
                        arr[2] = 'num_0x' + arr[2][0:-1]
                    elif (arr[2]=='0' or arr[2].isdigit()):
                        arr[2] = 'num_0x' + arr[2]
                    if (arr[2] not in self.exitsvir):
                        strcmd = (arr[2] + "=" + "self.IRtoZ3exprVira(arr[2])")
                        print strcmd
                        exec strcmd
                        self.exitsvir.append(arr[2])
                    strcmd = (arr[1]) + "="+arr[1]+ "+" + arr[2]
                    print strcmd
                    exec strcmd
                elif(arr[0] == 'movzx'):
                    if (arr[1] not in self.exitsvir):
                        strcmd = (arr[1] + "=" + "self.IRtoZ3exprVira(arr[1])")
                        exec strcmd
                        self.exitsvir.append(arr[1])
                    strcmd = (arr[1]) + "=self.password[i]"
                    exec strcmd
                    print strcmd
                elif (arr[0] == 'shl'):
                    strcmd = (arr[1] +"="+arr[1]+"<<"+arr[2])
                    exec strcmd
                    print strcmd
                elif (arr[0] == 'shr'):
                    strcmd = (arr[1] +"="+arr[1]+">>"+arr[2])
                    print strcmd
                    exec strcmd
                elif (arr[0]=='xor'):
                    strcmd = (arr[1]+"=("+arr[1]+"^"+arr[2]+")")
                    print strcmd
                    exec strcmd

            # print  'a=', rbpvar_C
        #endbody
        # print 'endbody:'
        for item in self.endbody:
            item = item.replace("+", "").replace("[", "").replace("]", "")
            arr = item.split(" ")
            if (arr[0] == 'mov'):

                if (arr[1] not in self.exitsvir):
                    strcmd = (arr[1] + "=" + "self.IRtoZ3exprVira(arr[1])")
                    exec strcmd
                    self.exitsvir.append(arr[1])
                if (arr[2][-1] == 'h'):
                    arr[2] = 'num_0x' + arr[2][0:-1]
                elif (arr[2] == '0' or arr[2].isdigit()):
                    arr[2] = 'num_0x' + arr[2]
                if (arr[2] not in self.exitsvir):
                    strcmd = (arr[2] + "=" + "self.IRtoZ3exprVira(arr[2])")
                    exec strcmd
                    self.exitsvir.append(arr[2])
                strcmd = (arr[1]) + "=" + arr[2]
                print strcmd
                exec strcmd
        return eax







loopbody = ['mov eax [rbp+var_8]', 'shl eax 5', 'mov edx eax', 'mov rax [rbp+var_18]', 'movzx eax byte ptr [rax]', 'movsx eax al', 'add edx eax', 'mov eax [rbp+var_8]', 'shr eax 2', 'add eax edx', 'xor [rbp+var_8] eax', 'add [rbp+var_18] 1', 'add [rbp+var_4] 1']
initbody =['push rbp', 'mov rbp rsp', 'mov [rbp+var_18] rdi', 'mov [rbp+var_1C] esi', 'mov [rbp+var_8] 4E67C6A7h', 'mov [rbp+var_4] 0', 'mov [rbp+var_4] 0', 'jmp loc_40066E']
endbody =['mov eax [rbp+var_8]', 'pop rbp', 'retn']

aa = getZ3expr(initbody,loopbody,endbody,8,61769727)
aa.solve()


